@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<div class="chat-container">
    <div class="message-box">
        <div class="message sent">
            <div class="message-content">Сообщение 1</div>
            <div class="message-time">12:00</div>
        </div>
        <div class="message received">
            <div class="message-content">Сообщение 2</div>
            <div class="message-time">12:05</div>
        </div>
        <div class="message sent">
            <div class="message-content">Сообщение 3</div>
            <div class="message-time">12:10</div>
        </div>
        <!-- Добавьте больше сообщений по необходимости -->
    </div>

    <div class="chat-input-container">
        <button class="btn-icon add-file-button">
            <svg class="feather feather-plus" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
        </button>
        <input type="text" placeholder="Type a message..." />
        <button class="btn-icon send-message-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
        </button>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string ChatName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int AdditionalId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Url { get; set; }

    private HubConnection hubConnection;
    private string user;
    private string message;
    private string group; // Новая переменная для группы
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Url}/chathub")
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add($"{user}: {message}");
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinGroup()
    {
        if (!string.IsNullOrEmpty(group))
        {
            await hubConnection.InvokeAsync("JoinGroup", group);
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(user) && !string.IsNullOrEmpty(message) && !string.IsNullOrEmpty(group))
        {
            await hubConnection.InvokeAsync("SendMessage", group, user, message);
            message = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}