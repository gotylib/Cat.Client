@page "/chat"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<div class="chat-container">
    <div class="message-box">
        @foreach (var msg in messages)
        {
            <div class="message @(msg.Sender == ChatName ? "sent" : "received")">
                <div class="message-content">@msg.Content</div>
                <div class="message-time">@msg.Time</div>
            </div>
        }
    </div>

    <div class="chat-input-container">
        <button class="btn-icon add-file-button">
            <svg class="feather feather-plus" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
        </button>
        <input type="text" placeholder="Type a message..." @bind="newMessage" />
        <button class="btn-icon send-message-button" @onclick="SendMessage">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
        </button>
    </div>
</div>

@code {
    @code {
        [Parameter]
        [SupplyParameterFromQuery]
        public string ChatName { get; set; }

        [Parameter]
        [SupplyParameterFromQuery]
        public int AdditionalId { get; set; }

        [Parameter]
        [SupplyParameterFromQuery]
        public string Url { get; set; }

        private HubConnection hubConnection;
        private string newMessage;
        private List<Message> messages = new List<Message>();

        protected override async Task OnInitializedAsync()
        {
            if (string.IsNullOrEmpty(Url))
            {
                Console.WriteLine("URL is null or empty");
                return;
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Url}chathub")
                .Build();

            hubConnection.On<string, string, string>("ReceiveMessage", (user, message, time) =>
            {
                messages.Add(new Message { Sender = user, Content = message, Time = time });
                InvokeAsync(StateHasChanged);
            });

            try
            {
                await hubConnection.StartAsync();
                await hubConnection.InvokeAsync("JoinGroup", "Test");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR hub: {ex.Message}");
            }
        }

        private async Task SendMessage()
        {
            if (!string.IsNullOrEmpty(newMessage))
            {
                var time = DateTime.Now.ToString("HH:mm");
                await hubConnection.InvokeAsync("SendMessage", "Test", ChatName, newMessage, time);
                newMessage = string.Empty; // Очищаем поле ввода
            }
        }

        public async ValueTask DisposeAsync()
        {
            if (hubConnection != null)
            {
                await hubConnection.DisposeAsync();
            }
        }

        private class Message
        {
            public string Sender { get; set; }
            public string Content { get; set; }
            public string Time { get; set; }
        }
    }
}
